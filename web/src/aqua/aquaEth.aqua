import "@fluencelabs/aqua-dht/dht.aqua"
import "@fluencelabs/aqua-lib/builtin.aqua"

data Result:
    success: bool
    reason: string
    code: u32
    message: string

data ResultString:
    info: Result
    data: string

data ResultAddresses:
    info: Result
    data: []string

service Ethereum("ethereum"):
    enable()
    
    getAccounts() -> []string
    
    registerListenerNode(listenerPeerId: string, listenerRelayId: string)
    
    receiveAccounts(accounts: []string)
    
    getBalance(address: string) -> ResultString
    

func enable(peerId: string, relayId: string):
    on peerId via relayId:
        Ethereum.enable()
        
func getAccounts(peerId: string, relayId: string) -> []string:
    on peerId via relayId:
        stuff <- Ethereum.getAccounts()
    <- stuff
    
func registerListenerNode(peerId: string, relayId: string, listenerPeerId: string, listenerRelayId: string):
    on peerId via relayId:
        Ethereum.registerListenerNode(listenerPeerId, listenerRelayId)
    
func listenerNodeCallback(peerId: string, relayId: string, accounts: []string):
    on peerId via relayId:
        Ethereum.receiveAccounts(accounts)

func getBalance(peerId: string, relayId: string, address: string) -> ResultString:
    on peerId via relayId:
        res <- Ethereum.getBalance(address)
    <- res
        