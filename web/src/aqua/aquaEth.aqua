data Result:
    success: bool
    reason: string
    code: u32
    message: string

data ResultString:
    info: Result
    data: string

func identityResultString(val: ResultString) -> ResultString:
    <- val 

data ResultAddresses:
    info: Result
    data: []string

data JSONPacket:
    type: string
    data: string

service Ethereum("ethereum"):
    -- Methods that execute on the remote client (The one with MetaMask)
    requestAccounts() -> ResultAddresses
    getBalance(address: string) -> ResultString
    getBlockNumber() -> ResultString

    formatEther(amount: string) -> ResultString
    
    -- Methods to register a listener for window.ethereum events on the
    -- local node
    registerListenerNode(listenerPeerId: string, listenerRelayId: string)
    receiveData(packet: JSONPacket)

func requestAccounts(peerId: string, relayId: string) -> ResultAddresses:
    on peerId via relayId:
        res <- Ethereum.requestAccounts()
    <- res
    
func registerListenerNode(peerId: string, relayId: string, listenerPeerId: string, listenerRelayId: string):
    on peerId via relayId:
        Ethereum.registerListenerNode(listenerPeerId, listenerRelayId)
    
func listenerNodeCallback(peerId: string, relayId: string, jsonPacket: JSONPacket):
    on peerId via relayId:
        Ethereum.receiveData(jsonPacket)

func getBalance(peerId: string, relayId: string, address: string) -> ResultString:
    resBox: *ResultString

    on peerId via relayId:
        blockRes <- Ethereum.getBalance(address)
        if blockRes.info.success:
            resBox <- Ethereum.formatEther(blockRes.data)
        else:
            resBox <- identityResultString(blockRes)
            
    <- resBox! 

func getBlockNumber(peerId: string, relayId: string) -> ResultString:
    on peerId via relayId:
        res <- Ethereum.getBlockNumber()
    <- res

func formatEther(peerId: string, relayId: string, amount: string) -> ResultString:
    on peerId via relayId:
        res <- Ethereum.formatEther(amount)
    <- res