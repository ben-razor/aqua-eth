import "listener.aqua"

-- Aqua wrapper around ethers.js
alias BigNumber: string 
alias BigInt: string
alias HexString: string 
alias JSONString: string
alias RawSignature: string
alias Address: string

data Block:
    difficulty: BigNumber
    extraData: string
    gasLimit: BigNumber
    gasUsed: BigNumber
    hash: HexString
    miner: Address
    nonce: HexString
    number: BigInt
    parentHash: HexString
    timestamp: BigInt
    transactions: []HexString

data Currency:
    name: string
    symbol: string
    decimals: u32 

data Chain:
    name: string
    chainId: u32
    shortName: string
    network: string
    networkId: u32
    currency: Currency

data FeeData:
    gasPrice: string
    maxFeePerGas: string
    maxPriorityFeePerGas: string

data TransactionRequest:
    to: Address
    from: Address 
    nonce: BigInt 
    data: HexString
    value: BigNumber 
    gasLimit: BigNumber 
    gasPrice: BigNumber
    maxFeePerGas: BigNumber
    maxPriorityFeePerGas: BigNumber
    chainId: u32
    transactionRequest: u32

data TransactionResponse:
    to: Address
    from: Address 
    nonce: BigInt 
    data: HexString
    value: BigNumber 
    gasLimit: BigNumber 
    gasPrice: BigNumber
    maxFeePerGas: BigNumber
    maxPriorityFeePerGas: BigNumber
    chainId: u32
    transactionRequest: u32

    blockNumber: ?BigInt
    blockHash: ?HexString
    timestamp: ?BigInt
    confirmations: ?BigInt 
    raw: ?HexString 
    type: ?BigInt

data TransactionReceipt:
    to: Address
    from: Address 
    contractAddress: Address
    transactionIndex: u32
    type: u32
    gasUsed: BigNumber
    transactionHash: string
    status: bool 

data TokenInfo:
    address: Address
    name: string
    symbol: string
    decimals: u32

-- Result Records package return values with info about success
data Result:
    success: bool
    reason: string
    code: u32
    message: string

data ResultString:
    info: Result
    data: string

data ResultBigInt:
    info: Result
    data: BigInt

-- Same as result string but the user knows to parse data as a JSON string
data ResultJSONString:
    info: Result
    data: JSONString

data ResultAddresses:
    info: Result
    data: []string

data ResultU32:
    info: Result
    data: u32

data ResultFeeData:
    info: Result
    data: FeeData

data ResultChain:
    info: Result
    data: Chain

data JSONPacket:
    type: string
    data: JSONString 

data ResultBlock:
    info: Result
    data: Block

data ResultTransaction:
    info: Result
    data: TransactionResponse

data ResultTokenInfo:
    info: Result
    data: TokenInfo

func identityResultString(val: ResultString) -> ResultString:
    <- val 

func identityResultChain(val: ResultChain) -> ResultChain:
    <- val 

func identityU32(val: u32) -> u32:
    <- val

service Ethereum("ethereum"):

    -- Methods that execute on the signer (The one with MetaMask)
    requestAccounts() -> ResultAddresses
    getConnectedChainInfo() -> ResultChain
    getChainInfo(chainId: u32) -> ResultChain
    getBalance(address: string) -> ResultString
    getFeeData() -> ResultFeeData

    -- Get the most recent block number
    getBlockNumber() -> ResultBigInt
    getBlock(blockNumber: BigInt) -> ResultBlock
    getTransactionCount() -> ResultU32
    getTransaction(id: HexString) -> ResultTransaction

    erc20Connect(contractAddress: string) -> ResultTokenInfo
    erc20BalanceOf(contractAddress: string, address: string) -> ResultString
    erc20Transfer(contractAddress: string, to: string, amount: string) -> ResultTransaction

    -- Returns a string representation of value formatted with unit digits (if it is a number) or to the unit specified (if a string).
    formatUnits(value: string, unit: string) -> ResultString
    -- The equivalent to calling formatUnits(value, "ether").
    formatEther(value: string) -> ResultString
    -- Returns a BigNumber representation of value, parsed with unit digits (if it is a number) or from the unit specified (if a string).
    parseUnits(value: string, unit: string) -> ResultString
    -- The equivalent to calling parseUnits(value, "ether").
    parseEther(value: string) -> ResultString
    
    sendTransaction(transactionRequest: TransactionRequest) -> ResultTransaction
    signTypedData(domain: JSONString, types: JSONString, value: JSONString) -> RawSignature
    verifyTypedData(domain: JSONString, types: JSONString, value: JSONString, signature: RawSignature) -> Address

    -- Methods to register a listener for events on the local client 
    registerListenerNode(listenerPeerId: string, listenerRelayId: string)

    -- Helper methods
    castErrorResultU32ToTransaction(result: ResultU32) -> ResultTransaction
    changeTransactionRequestNonce(transaction: TransactionRequest, nonce: u32) -> TransactionRequest

func requestAccounts(peerId: string, relayId: string) -> ResultAddresses:
    on peerId via relayId:
        res <- Ethereum.requestAccounts()
    <- res
    
func getChainInfo(peerId: string, relayId: string) -> ResultChain:
    on peerId via relayId:
        res <- Ethereum.getConnectedChainInfo()
    <- res

func registerListenerNode(peerId: string, relayId: string, listenerPeerId: string, listenerRelayId: string):
    on peerId via relayId:
        Ethereum.registerListenerNode(listenerPeerId, listenerRelayId)
    
func listenerNodeCallback(peerId: string, relayId: string, jsonPacket: JSONPacket):
    on peerId via relayId:
        Listener.receiveData(jsonPacket)

func getBalance(peerId: string, relayId: string, address: string) -> ResultString:
    resBox: *ResultString

    on peerId via relayId:
        blockRes <- Ethereum.getBalance(address)
        if blockRes.info.success:
            resBox <- Ethereum.formatEther(blockRes.data)
        else:
            resBox <- identityResultString(blockRes)
            
    <- resBox! 

func getFeeData(peerId: string, relayId: string) -> ResultFeeData:
    on peerId via relayId:
        res <- Ethereum.getFeeData()
    <- res

func getBlockNumber(peerId: string, relayId: string) -> ResultBigInt:
    on peerId via relayId:
        res <- Ethereum.getBlockNumber()
    <- res

func getBlock(peerId: string, relayId: string, blockNumber: BigInt) -> ResultBlock:
    on peerId via relayId:
        res <- Ethereum.getBlock(blockNumber)
    <- res

func getTransactionCount(peerId: string, relayId: string) -> ResultU32:
    on peerId via relayId:
        res <- Ethereum.getTransactionCount()
    <- res

func getTransaction(peerId: string, relayId: string, id: HexString) -> ResultTransaction:
    on peerId via relayId:
        res <- Ethereum.getTransaction(id)
    <- res

func formatUnits(peerId: string, relayId: string, value: string, unit: string) -> ResultString:
    on peerId via relayId:
        res <- Ethereum.formatUnits(value, unit)
    <- res

func formatEther(peerId: string, relayId: string, value: string) -> ResultString:
    on peerId via relayId:
        res <- Ethereum.formatEther(value)
    <- res

func parseUnits(peerId: string, relayId: string, value: string, unit: string) -> ResultString:
    on peerId via relayId:
        res <- Ethereum.parseUnits(value, unit)
    <- res

func parseEther(peerId: string, relayId: string, value: string) -> ResultString:
    on peerId via relayId:
        res <- Ethereum.parseEther(value)
    <- res

func sendTransaction(peerId: string, relayId: string, transactionRequest: TransactionRequest) -> ResultTransaction:
    on peerId via relayId:
        res <- Ethereum.sendTransaction(transactionRequest)
    <- res

func signTypedData(peerId: string, relayId: string,
                   domain: JSONString, types: JSONString, value: JSONString) -> RawSignature:
    on peerId via relayId:
        res <- Ethereum.signTypedData(domain, types, value)
    <- res

func verifyTypedData(peerId: string, relayId: string,
                     domain: JSONString, types: JSONString, value: JSONString,
                     signature: RawSignature) -> RawSignature:
    on peerId via relayId:
        res <- Ethereum.verifyTypedData(domain, types, value, signature)
    <- res

func erc20Connect(peerId: string, relayId: string, contractAddress: string) -> ResultTokenInfo:
    on peerId via relayId:
        res <- Ethereum.erc20Connect(contractAddress)
    <- res

func erc20BalanceOf(peerId: string, relayId: string, contractAddress: string, address: string) -> ResultString:
    resBox: *ResultString

    on peerId via relayId:
        blockRes <- Ethereum.erc20BalanceOf(contractAddress, address)
        if blockRes.info.success:
            resBox <- Ethereum.formatEther(blockRes.data)
        else:
            resBox <- identityResultString(blockRes)
            
    <- resBox! 

func erc20Transfer(peerId: string, relayId: string, 
                   contractAddress: string, to: string, amount: string) -> ResultTransaction:
    on peerId via relayId:
        res <- Ethereum.erc20Transfer(contractAddress, to, amount)
    <- res